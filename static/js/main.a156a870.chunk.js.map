{"version":3,"sources":["components/Mahjong.js","components/Tile.js","components/Tileset.js","components/NameCard.js","components/OtherPlayer.js","components/Discards.js","components/Unselect.js","components/Actions.js","components/Board.js","components/Summary.js","components/ScoreInfo.js","components/Information.js","components/Username.js","components/Table.js","videos/mahjongVid.webm","components/Menu.js","App.js","index.js"],"names":["compare","a","b","suit","value","getChow","chowSet","result","map","Map","item","has","set","push","id","picture","checkHand","hand","winner","eye","console","log","length","forEach","tile","filter","e","sequential","same","concat","checkGame","tiles","revealed","bonusTiles","tableWind","yourWind","lastDiscard","drawn","summary","summary_combination","mahjong","sort","combination","name","points","hidden","lookupPair","reduce","pairs","十三幺","十三幺Unique","v","JSON","stringify","values","win","winningHand","sequentials","set_temp","checkMahjong","game","chowSets","pongSets","special","findIndex","winningSet","indexOf","suits","Set","honors","includes","one9","dragonPoints","tableWindPoints","yourWindPoints","animals","animalPoints","winds","flowerPoints","dragon","add","accumulator","Math","floor","combinationPoints","totalPoints","selfDrawn","Tile","shadowColor","color","hoveredTile","src","fallbackSrc","h","window","innerHeight","innerWidth","borderRadius","borderWidth","borderColor","borderStyle","boxShadow","opacity","Tileset","direction","spacing","NameCard","playerID","username","currentPlayer","wind","windImage","textColor","overflow","bgColor","px","p","w","OtherPlayer","gameState","gameStateIndex","playerIndex","hiddenListV","Array","apply","handLength","bg","revealedTiles","hiddenList","Discards","discards","setHoveredTile","handleHover","tileList","motion","div","onHoverStart","onHoverEnd","whileHover","scale","overflowY","overflowX","Unselect","props","ref","handleSelectTile","wrapperRef","useRef","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","children","Actions","sequentialTiles","pongTiles","kongTiles","handleChow","handlePong","handleKong","handleGame","validMove","handleSkip","chowAction","_hover","onClick","pongAction","kongAction","type","slice","fontSize","variant","display","Board","clientID","newTile","currentTurn","selectedTile","handleDiscard","setValidMove","useState","tileVariants","selected","y","unselected","idx","variants","animate","handleClickTile","m","mt","count","row","position","zIndex","mb","Summary","roundEnd","handleNewGame","draw","isOpen","onOpen","onClose","newGame","setNewGame","setTimeout","nameDict","allPong","臭平和","平和","清一色","混一色","oneNine","halfOneNine","七对子","isDisabled","summary_filtered","Object","keys","key","table","isNumeric","size","ScoreInfo","score","info","pictures","useDisclosure","onToggle","in","split","sentence","align","justifyContent","Information","addBot","connectionStatus","useClipboard","location","href","hasCopied","onCopy","tWind","player","flowerIndex","scoreTable","pettyTable","find","mr","isFitted","isAttached","disabled","textAlign","isReadOnly","Username","sendMessage","defaultIsOpen","setUsername","submitUsername","closeOnOverlayClick","onKeyPress","onChange","placeholder","my","Table","sequentialTiles_top","sequentialTiles_mid","sequentialTiles_bot","validMove_temp","gameId","useParams","socketUrl","setMessageHistory","setOnlineUsers","setClientID","winnerID","setWinnerID","setCurrentPlayer","previousPlayer","setPreviousPlayer","setTiles","setNewTile","setBonusTiles","setRevealedTiles","setYourWind","setTableWind","setDiscards","setLastDiscard","setSequentialTiles","setPongTiles","setKongTiles","setGame","setSummary","setCurrentTurn","isOpenSummary","onOpenSummary","onCloseSummary","isOpenInformation","onCloseInformation","onToggleInformation","setDraw","setRoundEnd","minimumPoints","setGameState","setSelectedTile","lookup","useWebSocket","lastMessage","readyState","ReadyState","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","prev","data","userList","replace","gameState_temp","parse","clientID_temp","tiles_temp","game_temp","summary_temp","four_concealed","kongSets","one_concealed","checkKong","bonusTiles_temp","bonuses","bonus","discards_temp","at","sameTiles","sequentialTiles_temp","checkValidMoves","revealedTiles_temp","newTiles","i","currentPlayer_temp","substring","pongSet","kongSet","float","placement","_focus","alignItems","boxSize","Menu","navigate","useNavigate","gameCode","setGameCode","width","setWidth","autoPlay","loop","muted","bgVid","s4","random","toString","gameID","animateOpacity","focusBorderColor","handleCodeChange","alert","outline","App","forceRefresh","basename","process","path","exact","element","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a156a870.chunk.js","sourcesContent":["//sort hand\r\nexport function compare( a, b ) {\r\n    if ( a.suit < b.suit ){\r\n      return -1;\r\n    }\r\n    if ( a.suit > b.suit ){\r\n      return 1;\r\n    }\r\n    if ( a.suit === b.suit ){\r\n      if ( a.value < b.value ){\r\n        return -1;\r\n      }\r\n      if ( a.value > b.value ){\r\n        return 1;\r\n      }\r\n    }\r\n    return 0;\r\n  }\r\n\r\nexport function getChow(chowSet) {\r\n  const result = [];\r\n  const map = new Map();\r\n  for (const item of chowSet) {\r\n      if(!map.has(item.value)){\r\n          map.set(item.value, true);    // set any value to Map\r\n          result.push({\r\n              suit: item.suit,\r\n              value: item.value,\r\n              id: item.id,\r\n              picture: item.picture\r\n          });\r\n      }\r\n  }\r\n  return result\r\n}\r\n\r\nexport function checkHand(hand, winner, eye){\r\n  console.log(\"Recursion\",hand, winner, eye)\r\n  //4 sets and an eye, so if there are more sets, it's wrong\r\n  if (winner.length > 5){\r\n    return [false,winner,eye]\r\n  }\r\n  //remove tiles marked as winning from hand\r\n  if (winner.length > 0){\r\n    winner.forEach((set) => {\r\n      set.forEach((tile) => {\r\n        hand = hand.filter(e => !((e.picture === tile.picture) && (e.id === tile.id)))\r\n      })\r\n    })\r\n  }\r\n  //base case, minimum of 2 tiles to form a set\r\n  if (hand.length > 0){\r\n    //check for chow\r\n    let sequential = getChow(hand.filter(e => (e.suit === hand[0].suit) && (e.value === hand[0].value || e.value === hand[0].value+1 || e.value === hand[0].value+2)))\r\n    //check for same tiles\r\n    let same = hand.filter(e => e.picture === hand[0].picture)\r\n\r\n    if (sequential.length == 3) {\r\n      console.log(\"Sequential set\", sequential)\r\n      if (checkHand(hand,winner.concat([sequential]),eye)[0]){\r\n        return checkHand(hand,winner.concat([sequential]),eye)\r\n      }\r\n    }\r\n    if (same.length == 4){\r\n      console.log(\"Kong set\", same)\r\n      if (checkHand(hand,winner.concat([same]),eye)[0]){\r\n        return checkHand(hand,winner.concat([same]),eye)\r\n      }\r\n    }\r\n    if (same.length == 3){\r\n      console.log(\"Pong set\", same)\r\n      if (checkHand(hand,winner.concat([same]), eye)[0]){\r\n        return checkHand(hand,winner.concat([same]),eye)\r\n      }\r\n    }\r\n    if (same.length == 2 && !eye){\r\n      console.log(\"Eye\", same)\r\n      if (checkHand(hand,winner.concat([same]), true)[0]){\r\n        return checkHand(hand,winner.concat([same]),true)\r\n      }\r\n    }\r\n    //if the current tile doesn't form a set, return false and stop this branch\r\n    return [false, winner, eye]\r\n  }else if (hand.length === 0){ //if there are no tiles left\r\n    return [true, winner, eye]\r\n  }\r\n  \r\n}\r\n\r\nexport function checkMahjong(hidden, revealed) {\r\n  let hand=hidden.concat(revealed)\r\n  //check for special cases\r\n  //1. 7 pair\r\n  const lookupPair = hand.reduce((a, e) => {\r\n    a[`${e.suit} ${e.value}`] = ++a[`${e.suit} ${e.value}`] || 0;\r\n    return a;\r\n  }, {});\r\n\r\n  let pairs = hand.filter(e => lookupPair[`${e.suit} ${e.value}`] === 1)\r\n\r\n  console.log(\"Pairs: \",pairs)\r\n  if (pairs.length === 14){\r\n    return [true, [], [], [], \"七对子\"]\r\n  }\r\n\r\n  //2. 13 wonders\r\n  let 十三幺 = hand.filter(e => (e.suit === \"bamboo\" && e.value === 1) || (e.suit === \"bamboo\" && e.value === 9) || (e.suit === \"circles\" && e.value === 1) || (e.suit === \"circles\" && e.value === 9) || (e.suit === \"numbers\" && e.value === 1) || (e.suit === \"numbers\" && e.value === 9) || (e.suit === \"~north\") || (e.suit === \"~south\") || (e.suit === \"~east\") || (e.suit === \"~west\") || (e.suit === \"~red\") || (e.suit === \"~green\") || (e.suit === \"~white\") )\r\n  console.log(\"十三幺: \",十三幺)\r\n  let 十三幺Unique =  [...new Map(十三幺.map(v => [JSON.stringify([v.suit,v.value]), v])).values()]\r\n  if (十三幺.length === 14 && 十三幺Unique.length === 13){\r\n    return [true,[],[],[],\"十三幺\"]\r\n  }\r\n\r\n  let [win, winningHand] = checkHand(hidden,[],false)\r\n  let [temp, revealedHand] = checkHand(revealed,[],false)\r\n  winningHand = revealedHand.concat(winningHand)\r\n  if (win){\r\n    console.log(\"Winning hand!\", winningHand)\r\n    let eye\r\n    let same = []\r\n    let sequentials = []\r\n    winningHand.forEach((set) => {\r\n      let set_temp = set.filter((tile) => tile.picture === set[0].picture)\r\n      console.log(\"Set temp\", set_temp)\r\n      //handle same tiles\r\n      if (set_temp.length > 1){\r\n        if (set.length == 2){\r\n          eye = set\r\n        }else{\r\n          same = same.concat([set])\r\n        }\r\n      }else{\r\n        sequentials = sequentials.concat([set])\r\n      }\r\n    })\r\n    return [true,sequentials,same,eye,null]\r\n  }\r\n\r\n  return [false,[],[],[],\"\"]\r\n\r\n}\r\n\r\nexport function checkGame(tiles, revealed, bonusTiles,tableWind,yourWind, lastDiscard,drawn) {\r\n  let mahjong = tiles.concat(revealed.concat(lastDiscard).concat(drawn)).sort(compare)\r\n  let pointsLimit = 5\r\n  let summary, summary_combination\r\n\r\n  //Mahjong hands\r\n  let combination = [\r\n     {name: \"allPong\",\r\n     value: false,\r\n     points: 2},\r\n     {name: \"臭平和\",\r\n     value: false,\r\n     points: 1},\r\n     {name: \"平和\",\r\n     value: false,\r\n     points: 4},\r\n     {name: \"清一色\",\r\n     value: false,\r\n     points: 4},\r\n     {name: \"混一色\",\r\n     value: false,\r\n     points: 2},\r\n     {name: \"oneNine\",\r\n     value: false,\r\n     points: 5},\r\n     {name: \"halfOneNine\",\r\n     value: false,\r\n     points: 1},\r\n     {name: \"七对子\",\r\n     value: false,\r\n     points: 3},\r\n     {name: \"十三幺\",\r\n     value: false,\r\n     points: 5},\r\n  ]\r\n  \r\n  let [game, chowSets, pongSets, eye, special] = checkMahjong(tiles.concat(lastDiscard).concat(drawn).sort(compare), revealed)\r\n  console.log(\"Pong Sets:\", pongSets)\r\n  console.log(\"Chow sets:\", chowSets)\r\n  console.log(\"Eye:\", eye)\r\n\r\n  //check strength of hand\r\n  if (special){\r\n    if (special === \"七对子\"){\r\n      combination[combination.findIndex(e => e.name === \"七对子\")].value = true\r\n    } else if (special === \"十三幺\"){\r\n      combination[combination.findIndex(e => e.name === \"十三幺\")].value = true\r\n    }\r\n  }else if (game){\r\n    //all pong game\r\n    if (pongSets.length >= 4){\r\n      combination[combination.findIndex(e => e.name === \"allPong\")].value = true\r\n    }\r\n    //check allChow\r\n    // 1. The EYE cannot be a Dragon Tile or the Prevailing Wind or the Players Wind for that game\r\n    if (eye[0].suit != '~red' && eye[0].suit != '~green' && eye[0].suit !='~white' && eye[0].suit != tableWind && eye[0].suit != yourWind){\r\n      // 2. The tiles must be made up of one EYE and four CHOWs.\r\n      if (chowSets.length === 4){\r\n        // 3. If the player wins the game on a discarded tile, there must be more than one unique tile that could have caused the player to win the game\r\n        if (lastDiscard.length !== 0){\r\n          let winningSet = chowSets.filter(e => e.indexOf(lastDiscard) > 0 )\r\n          if (winningSet[0] === lastDiscard || winningSet[2] === lastDiscard) {\r\n            //check if there are bonus tiles\r\n            if (bonusTiles.length === 0){\r\n              combination[combination.findIndex(e => e.name === \"平和\")].value = true\r\n            }else{\r\n              combination[combination.findIndex(e => e.name === \"臭平和\")].value = true\r\n            }\r\n          }\r\n        //3a.if it's self-drawn\r\n        }else{\r\n          if (bonusTiles.length === 0){\r\n            combination[combination.findIndex(e => e.name === \"平和\")].value = true\r\n          }else{\r\n            combination[combination.findIndex(e => e.name === \"臭平和\")].value = true\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    //check for color game\r\n    let suits = [...new Set(mahjong.map(e => e.suit))]\r\n    let honors = ['~east','~south','~west','~north','~red','~green','~white']\r\n    console.log(\"Suits: \", suits)\r\n    console.log(\"Filtered suits:\", suits.filter(e => !honors.includes(e)))\r\n\r\n    if (suits.length === 1){\r\n      combination[combination.findIndex(e => e.name === \"清一色\")].value = true\r\n    }else if (suits.filter(e => !honors.includes(e)).length === 1){\r\n      combination[combination.findIndex(e => e.name === \"混一色\")].value = true\r\n    }\r\n    //check for ones and nines\r\n    let one9 = [...new Set(mahjong.map(e => e.value))]\r\n    console.log(\"oneNine: \", one9.filter(e => e !== 9 && e !== 1 && e !== null))\r\n\r\n    if (one9.filter(e => e !== 9 && e !== 1).length === 0){\r\n      combination[combination.findIndex(e => e.name === \"oneNine\")].value = true\r\n    }else if (one9.filter(e => e !== 9 && e !== 1 && e !== null).length === 0){\r\n      combination[combination.findIndex(e => e.name === \"halfOneNine\")].value = true\r\n    }\r\n\r\n    //count points\r\n    let points = 0, dragonPoints = 0, tableWindPoints = 0, yourWindPoints = 0\r\n    //count bonus tiles\r\n    //animal tiles\r\n    let animals = ['cat','mouse','rooster','centipede']\r\n    let animalPoints = bonusTiles.filter(e => animals.includes(e.suit)).length\r\n    console.log(\"Animals: \", animalPoints)\r\n    //wind tiles\r\n    let winds = [\"~east\",\"~south\",\"~west\",\"~north\"]\r\n    let flowerPoints = bonusTiles.filter(e => !animals.includes(e.suit) && winds[e.value-1] === yourWind ).length\r\n    console.log(\"Flowers: \", flowerPoints)\r\n    //find honors tiles in pong sets\r\n    let dragon = [\"~red\",\"~green\",\"~white\"]\r\n    pongSets.forEach((set) => {\r\n      console.log(\"PongSets: \", set)\r\n      dragonPoints += Math.floor(set.filter(e => dragon.includes(e.suit)).length/3)\r\n      tableWindPoints += Math.floor(set.filter(e => e.suit === tableWind).length/3)\r\n      yourWindPoints += Math.floor(set.filter(e => e.suit === yourWind).length/3)\r\n    })\r\n    console.log(\"Dragon Tiles: \",dragonPoints)\r\n    console.log(\"Table Wind: \",tableWindPoints)\r\n    console.log(\"Your Wind: \",yourWindPoints)\r\n\r\n    function add(accumulator, a) {\r\n      return accumulator + a\r\n    }\r\n    //find the sum of all points in valid mahjong combinations\r\n    let combinationPoints = combination.filter(e => e.value === true).map(e => e.points).reduce(add,0)\r\n    console.log(\"Combi points: \", combinationPoints)\r\n\r\n    points = (dragonPoints+tableWindPoints+yourWindPoints + combinationPoints + animalPoints + flowerPoints > pointsLimit) ? pointsLimit : dragonPoints+tableWindPoints+yourWindPoints + combinationPoints + animalPoints + flowerPoints\r\n    console.log(\"Total points: \", points)\r\n\r\n    summary_combination = combination.filter(e => e.value === true).map(\r\n      function(e){\r\n        return {\r\n          [e.name] : e.points\r\n        }\r\n      }\r\n    )\r\n\r\n    summary = {\r\n      ...summary_combination[0],\r\n      animalPoints: animalPoints,\r\n      flowerPoints: flowerPoints,\r\n      dragonPoints: dragonPoints,\r\n      tableWindPoints: tableWindPoints,\r\n      yourWindPoints: yourWindPoints,\r\n      totalPoints: points,\r\n      selfDrawn: lastDiscard.length === 0? true : false\r\n    } \r\n\r\n\r\n }\r\n\r\n  return [game, summary]\r\n}\r\n","import {Image} from \"@chakra-ui/react\"\r\n\r\nexport default function Tile({picture, color, hoveredTile}){\r\n    let shadowColor\r\n    if (!color){\r\n        shadowColor = \"#343434\"\r\n    }else{\r\n        shadowColor = color\r\n    }\r\n\r\n    //if there is a hovered tile\r\n    if (hoveredTile){\r\n        //if hovered tile has the same picture\r\n        if (picture === hoveredTile.picture){\r\n            return(\r\n                <Image src={`https://raw.githubusercontent.com/JovenSoh/sgmahjong/gh-pages/images/${picture}.jpg`} fallbackSrc={\"../images/\" + picture + \".jpg\"}  h={ window.innerHeight > window.innerWidth ? '8vw' : '6vh' } borderRadius=\"5px\" borderWidth=\"1px\" borderColor=\"#343434\" borderStyle=\"solid\" boxShadow={`3px 4px ${shadowColor}`} />\r\n            )\r\n        }else{\r\n            return(\r\n                <Image src={`https://raw.githubusercontent.com/JovenSoh/sgmahjong/gh-pages/images/${picture}.jpg`} fallbackSrc={\"../images/\" + picture + \".jpg\"} h={ window.innerHeight > window.innerWidth ? '8vw' : '6vh' }  borderRadius=\"5px\" borderWidth=\"1px\" borderColor=\"#343434\" borderStyle=\"solid\" boxShadow={`3px 4px ${shadowColor}`} opacity=\"30%\" />\r\n            )            \r\n        }\r\n    }else{\r\n        return (\r\n            <Image src={`https://raw.githubusercontent.com/JovenSoh/sgmahjong/gh-pages/images/${picture}.jpg`} fallbackSrc={\"../images/\" + picture + \".jpg\"}  h={ window.innerHeight > window.innerWidth ? '8vw' : '6vh' } borderRadius=\"5px\" borderWidth=\"1px\" borderColor=\"#343434\" borderStyle=\"solid\" boxShadow={`3px 4px ${shadowColor}`} />\r\n        )\r\n    }\r\n\r\n}","import {HStack, VStack, Box, Image} from '@chakra-ui/react'\r\nimport Tile from './Tile'\r\n\r\nexport default function Tileset({tiles, direction, hoveredTile}) {\r\n  if (direction === \"vertical\"){\r\n    let spacing = 0\r\n    if (tiles.length > 10){\r\n      spacing = 0.14*tiles.length\r\n    }\r\n    return (\r\n      <VStack spacing={`-${spacing}vh`}>\r\n      {tiles.map((tile) => {\r\n        return (\r\n          <Tile picture={tile.picture} hoveredTile={hoveredTile} />\r\n          )\r\n      })}\r\n      </VStack>\r\n    )\r\n  }else{\r\n    return (\r\n      <HStack spacing='1px'>\r\n      {tiles.map((tile) => {\r\n        if (tile){\r\n          return (\r\n            <Tile picture={tile.picture} hoveredTile={hoveredTile} />\r\n            )\r\n        }\r\n      })}\r\n      </HStack>\r\n    )\r\n  }\r\n}\r\n","import {Center, Flex, Text, Image} from \"@chakra-ui/react\"\r\n\r\n\r\nexport default function NameCard({playerID, username, currentPlayer, wind}){\r\n    //convert tableWind to image\r\n    let windImages = {\r\n        \"~east\": \"}wind1\",\r\n        \"~south\": \"}wind2\",\r\n        \"~west\": \"}wind3\",\r\n        \"~north\": \"}wind4\"\r\n    }\r\n\r\n    let windImage = windImages[wind]\r\n    return(\r\n            <Center >\r\n                <Flex h='3vh' textColor='#fafafa' overflow=\"hidden\" bgColor={(currentPlayer===playerID) ? \"#a36453\":\"#55342b\"} px='5px' borderRadius=\"10px\" borderWidth=\"1px\" borderColor='black' borderStyle='solid'>\r\n                    {username}\r\n                    <Image p='2px' borderRadius=\"5px\" src={ windImage ? `https://raw.githubusercontent.com/JovenSoh/sgmahjong/gh-pages/images/${windImage}.jpg` : null} fallbackSrc={wind ? `../images/${windImage}.jpg` : null} w='2.3vh' h='2.8vh' />\r\n                </Flex>\r\n            </Center>\r\n    )\r\n}","import {Box, HStack, VStack, Center} from \"@chakra-ui/react\"\r\nimport Tileset from \"./Tileset\"\r\nimport NameCard from './NameCard'\r\n\r\nexport default function OtherPlayer({gameState, gameStateIndex, currentPlayer, playerIndex, hoveredTile}){\r\n\r\n    const hiddenList = (gameStateIndex) => {\r\n        let hiddenTemp = Array.apply(null, Array(gameState[gameStateIndex].handLength)).map(function () {})\r\n        const hidden = hiddenTemp.map(() => {\r\n            return(\r\n                <Box h='2vh' w='3.5vh'  borderRadius=\"5px\" borderWidth='1px' borderColor='black' bg='white' borderStyle='solid' />\r\n            )\r\n        })\r\n        return(hidden)\r\n    }\r\n\r\n    const hiddenListV = (gameStateIndex) => {\r\n        let hiddenTemp = Array.apply(null, Array(gameState[gameStateIndex].handLength)).map(function () {})\r\n        const hidden = hiddenTemp.map(() => {\r\n            return(\r\n                <Box h='3.5vh' w='2vh' borderRadius=\"5px\" borderWidth='1px' borderColor='black' bg='white' borderStyle='solid' />\r\n            )\r\n        })\r\n        return(hidden)\r\n    }\r\n\r\n    if (playerIndex === 1){\r\n        return(\r\n            <Box>\r\n                {gameState[(gameStateIndex+1)%4] &&\r\n                <VStack spacing='10px'>\r\n                    <NameCard playerID={gameState[(gameStateIndex+1)%4].playerID} username={gameState[(gameStateIndex+1)%4].username} currentPlayer={currentPlayer} wind={gameState[(gameStateIndex+1)%4].wind} />\r\n                    <HStack>\r\n                        <Box w='60px'>\r\n                            <Tileset direction=\"vertical\" tiles={gameState[(gameStateIndex+1)%4].revealedTiles.concat(gameState[(gameStateIndex+1)%4].bonusTiles)} hoveredTile={hoveredTile}/>\r\n                        </Box>\r\n                        <Box>\r\n                            <VStack spacing='2px'>\r\n                                {hiddenListV((gameStateIndex+1)%4)}\r\n                            </VStack>\r\n                        </Box>\r\n                    </HStack>\r\n                </VStack>\r\n                }\r\n            </Box>\r\n        )\r\n    }\r\n    else if (playerIndex === 2){\r\n        return(\r\n            <Box>\r\n                {gameState[(gameStateIndex+2)%4] &&\r\n                <>\r\n                    <NameCard playerID={gameState[(gameStateIndex+2)%4].playerID} username={gameState[(gameStateIndex+2)%4].username} currentPlayer={currentPlayer} wind={gameState[(gameStateIndex+2)%4].wind} />\r\n                    <Box>\r\n                        <Center>\r\n                            <HStack spacing='2px'>\r\n                                {hiddenList((gameStateIndex+2)%4)}\r\n                            </HStack>\r\n                        </Center>\r\n                        <Center>\r\n                            <Tileset tiles={gameState[(gameStateIndex+2)%4].revealedTiles.concat(gameState[(gameStateIndex+2)%4].bonusTiles)} hoveredTile={hoveredTile}/>\r\n                        </Center>\r\n                    </Box>\r\n                </>\r\n                }\r\n            </Box>\r\n        )\r\n    }else if (playerIndex === 3){\r\n        return(\r\n            <Box>\r\n                {gameState[(gameStateIndex+3)%4] &&\r\n                    <VStack spacing='10px'>\r\n                        <NameCard playerID={gameState[(gameStateIndex+3)%4].playerID} username={gameState[(gameStateIndex+3)%4].username} currentPlayer={currentPlayer} wind={gameState[(gameStateIndex+3)%4].wind} />\r\n                        <HStack>\r\n                            <Box>\r\n                                <VStack spacing='2px'>\r\n                                    {hiddenListV((gameStateIndex+3)%4)}\r\n                                </VStack>\r\n                            </Box>\r\n                            <Box w='60px'>\r\n                                <Tileset direction=\"vertical\" tiles={gameState[(gameStateIndex+3)%4].revealedTiles.concat(gameState[(gameStateIndex+3)%4].bonusTiles)} hoveredTile={hoveredTile}/>\r\n                            </Box>\r\n                        </HStack>\r\n                    </VStack>\r\n                }\r\n            </Box>\r\n        )\r\n    }\r\n}","import { Wrap } from '@chakra-ui/react'\r\nimport { motion } from 'framer-motion'\r\nimport Tile from './Tile'\r\n\r\nexport default function Discards({discards, hoveredTile, setHoveredTile, handleHover}){\r\n\r\n    const tileList = discards.map((tile) =>{\r\n        return (\r\n            <motion.div onHoverStart={() => handleHover(tile)} onHoverEnd={() => setHoveredTile(null)} whileHover={{scale:1.1}}  >\r\n                <Tile picture={tile.picture} hoveredTile={hoveredTile} />\r\n            </motion.div>\r\n        )\r\n    })\r\n\r\n    return(\r\n        <Wrap spacing='5px' h='50vh' w='50vh' overflowY='auto' overflowX='hidden' >\r\n                {tileList}\r\n        </Wrap>\r\n    )\r\n}","import React, { useRef, useEffect } from \"react\";\r\n\r\n/**\r\n * Hook that alerts clicks outside of the passed ref\r\n */\r\nfunction useOutsideAlerter(ref,handleSelectTile) {\r\n    useEffect(() => {\r\n        /**\r\n         * Alert if clicked on outside of element\r\n         */\r\n        function handleClickOutside(event) {\r\n            if (ref.current && !ref.current.contains(event.target)) {\r\n                handleSelectTile(null)\r\n            }\r\n        }\r\n\r\n        // Bind the event listener\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            // Unbind the event listener on clean up\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [ref]);\r\n}\r\n\r\n/**\r\n * Component that alerts if you click outside of it\r\n */\r\nexport default function Unselect(props) {\r\n    const wrapperRef = useRef(null);\r\n    useOutsideAlerter(wrapperRef,props.handleSelectTile);\r\n    \r\n    return <div ref={wrapperRef}>{props.children}</div>;\r\n}","import {Box, HStack, Button, Spacer} from '@chakra-ui/react'\r\nimport { compare } from './Mahjong'\r\nimport Tileset from './Tileset'\r\n\r\nexport default function Actions({lastDiscard, sequentialTiles, pongTiles, kongTiles, game, handleChow, handlePong, handleKong, handleGame, validMove, handleSkip}){\r\n    \r\n    const chowAction = sequentialTiles.map((e) => {\r\n        return(\r\n            <Box p=\"5px\" bg='#55342b' _hover={{bg:\"#a36453\"}} borderRadius=\"5px\" borderWidth=\"1px\" borderColor=\"#343434\" borderStyle=\"solid\" boxShadow={`3px 4px #000000`}\r\n                onClick={() => {\r\n                console.log(\"Selected chow set\", e)\r\n                handleChow(e.concat(lastDiscard).sort(compare))\r\n                }}>\r\n                <Tileset tiles={e.concat(lastDiscard).sort(compare)} />\r\n            </Box>\r\n        )\r\n    })\r\n\r\n    const pongAction = pongTiles.map((e) => {\r\n        return(\r\n            <Box p=\"5px\" bg='#55342b' _hover={{bg:\"#a36453\"}} borderRadius=\"5px\" borderWidth=\"1px\" borderColor=\"#343434\" borderStyle=\"solid\" boxShadow={`3px 4px #000000`}\r\n                onClick={() => {\r\n                console.log(\"Selected pong set\", e)\r\n                handlePong(e.sort(compare))\r\n                }}>\r\n                <Tileset tiles={e.sort(compare)} />\r\n            </Box>\r\n        )\r\n    })\r\n\r\n    const kongAction = kongTiles.map((e) => {\r\n        //if it's a full kongset with type\r\n            if (e.length > 1){\r\n                let type = e[4]\r\n                e = e.slice(0,4)\r\n                return(\r\n                    <Box p=\"5px\" bg='#55342b' _hover={{bg:\"#a36453\"}} borderRadius=\"5px\" borderWidth=\"1px\" borderColor=\"#343434\" borderStyle=\"solid\" boxShadow={`3px 4px #000000`}\r\n                    onClick={() => {\r\n                    console.log(\"Selected kong set\", e)\r\n                    handleKong(e.sort(compare), type)\r\n                    }}>\r\n                        <Tileset tiles={e.sort(compare)} />\r\n                    </Box>    \r\n                )\r\n            }\r\n    })\r\n\r\n    const gameAction = () => {\r\n        return(\r\n            <Button w='100px' h='50px' textColor=\"white\" p='0' fontSize=\"18\" variant='ghost' bg='#55342b' _hover={{bg:\"#a36453\"}}  onClick={handleGame} display={game ? \"block\" : \"none\"} >\r\n                Mahjong\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    const skipAction = () => {\r\n        return(\r\n            <Button w='100px' h='50px' textColor=\"white\" p='0' fontSize=\"18\" variant='ghost' bg='#55342b' _hover={{bg:\"#a36453\"}}  onClick={handleSkip} display={validMove ? \"block\" : \"none\"} >\r\n                Skip\r\n            </Button>\r\n        )\r\n    }\r\n \r\n    return(\r\n        <HStack h='100px'>\r\n            {validMove ? skipAction(): null}\r\n            {(sequentialTiles.length > 0) && validMove ? chowAction : null}\r\n            {(pongTiles.length > 0) && validMove ? pongAction : null}\r\n            {(kongTiles.length > 0) ? kongAction : null}\r\n            {game && validMove ? gameAction() : null}\r\n        </HStack>\r\n    )\r\n}","import {Box, HStack, Center, Spacer, Button, VStack, Image} from '@chakra-ui/react'\r\nimport { useState } from 'react'\r\nimport Tileset from './Tileset'\r\nimport OtherPlayer from './OtherPlayer'\r\nimport Discards from './Discards'\r\nimport Unselect from './Unselect'\r\nimport Tile from './Tile'\r\nimport { motion } from \"framer-motion\"\r\nimport Actions from './Actions'\r\n\r\nexport default function Board({clientID, tiles, newTile, handleSelectTile,currentTurn, currentPlayer, gameState, discards, selectedTile, handleDiscard, lastDiscard, pongTiles, handlePong, sequentialTiles, handleChow, kongTiles, handleKong, game, handleGame, validMove, setValidMove, handleSkip}){\r\n    const [hoveredTile, setHoveredTile] = useState()\r\n    let gameStateIndex = gameState.findIndex(e => e.playerID === clientID)\r\n    \r\n    const tileVariants = {\r\n        selected: {y:-15},\r\n        unselected: {y:0}\r\n    }\r\n\r\n    const handleClickTile = (tile) => {\r\n        if (selectedTile === tile && currentTurn){\r\n            handleDiscard()\r\n        }else{\r\n            handleSelectTile(tile)\r\n        }\r\n    }\r\n\r\n    const handleHover = (tile) => {\r\n        setHoveredTile(tile)\r\n    }\r\n\r\n    //Render tiles\r\n    const tileList = tiles.map((tile, idx) =>{\r\n        var color = \"#343434\"\r\n        if (tile === newTile && currentTurn){\r\n            color = \"#ff4a4a\"\r\n        }\r\n\r\n        return (\r\n                <motion.div onHoverStart={() => handleHover(tile)} onHoverEnd={() => setHoveredTile(null)} whileHover={{scale:1.1}} variants={tileVariants} animate={(selectedTile === tile) ? 'selected':'unselected'} >\r\n                    <Box key={idx} value = {tile} onClick={() => handleClickTile(tile)} >\r\n                        <Tile picture={tile.picture} color={color} />\r\n                    </Box>\r\n                </motion.div>\r\n        )\r\n\r\n    })\r\n\r\n    \r\n\r\n    return(\r\n        <>\r\n        <VStack h='95vh' w={ window.innerHeight > window.innerWidth ? '95vw' : '95vh' } m='auto' mt='2vh' bgColor=\"#006442\" borderWidth='5px' borderColor='#55342b'  borderStyle='solid'>\r\n            { gameState[(gameStateIndex+2)%4]? <OtherPlayer gameState={gameState} gameStateIndex={gameStateIndex} currentPlayer={currentPlayer} playerIndex={2} hoveredTile={hoveredTile}/> : <Spacer /> }\r\n            <Spacer />\r\n            <HStack w='100%'>\r\n                { gameState[(gameStateIndex+3)%4]? <OtherPlayer gameState={gameState} gameStateIndex={gameStateIndex} currentPlayer={currentPlayer} playerIndex={3} hoveredTile={hoveredTile}/> : <Spacer /> }\r\n                <Spacer />\r\n                <Discards discards={discards} hoveredTile={hoveredTile} setHoveredTile={setHoveredTile} handleHover={handleHover} />\r\n                <Spacer />\r\n                { gameState[(gameStateIndex+1)%4]? <OtherPlayer gameState={gameState} gameStateIndex={gameStateIndex} currentPlayer={currentPlayer} playerIndex={1} hoveredTile={hoveredTile}/> : <Spacer /> }\r\n            </HStack>\r\n            <Spacer />\r\n            {(sequentialTiles.length === 0 && pongTiles.length === 0 && kongTiles.reduce((count, row) => count + row.length, 0) <= 1 && !game && !validMove) ? <Box h='100px' /> : <Actions lastDiscard={lastDiscard} sequentialTiles={sequentialTiles} pongTiles={pongTiles} kongTiles={kongTiles} game={game} handleChow={handleChow} handlePong={handlePong} handleKong={handleKong} handleGame={handleGame} validMove={validMove} handleSkip={handleSkip} /> }\r\n            { gameState[gameStateIndex] &&\r\n            <Box position='relative' zIndex={2}>\r\n                <Box w='100%' m='auto'>\r\n                    <Center mb='5px'>\r\n                        <Tileset tiles={gameState[gameStateIndex].revealedTiles.concat(gameState[gameStateIndex].bonusTiles)} />\r\n                    </Center>\r\n                </Box>\r\n                <Center w='100%' m='auto' mb='5px'>\r\n                    <Unselect handleSelectTile={handleSelectTile}>\r\n                        <HStack spacing=\"1px\">\r\n                            {tileList}\r\n                        </HStack>\r\n                    </Unselect>\r\n                </Center>\r\n            </Box>\r\n            }\r\n        </VStack>\r\n        </>\r\n    )\r\n}","import {Button, Box, Center, Table, Thead, Tbody, Th, Tr, Td, Modal, ModalOverlay, ModalContent, ModalHeader, useDisclosure, ModalBody, ModalFooter, ModalCloseButton} from '@chakra-ui/react'\r\nimport { useState, useEffect } from 'react'\r\n\r\nexport default function Summary({username, roundEnd, summary, handleNewGame, draw, isOpen, onOpen, onClose}) {  \r\n    const [newGame, setNewGame] = useState(true)\r\n    \r\n    useEffect(() => {\r\n        if (roundEnd){\r\n        onOpen()\r\n        setTimeout(() => {\r\n            setNewGame(false)}\r\n            ,3000)\r\n        }\r\n    },[roundEnd])\r\n\r\n    const nameDict = {\r\n        animalPoints: \"Animal Tiles\",\r\n        dragonPoints: \"Dragon Set\",\r\n        flowerPoints: \"Seat Flower\",\r\n        tableWindPoints: \"Prevailing Wind Set\",\r\n        yourWindPoints: \"Seat Wind Set\",\r\n        totalPoints: \"Total tai\",\r\n        allPong: \"All Pong\",\r\n        臭平和: \"All Chow\",\r\n        平和: \"Ping Wu\",\r\n        清一色: \"Full Color\",\r\n        混一色: \"Half Color\",\r\n        oneNine: \"All Terminals\",\r\n        halfOneNine: \"Terminals and Honors\",\r\n        七对子: \"7 Pairs\",\r\n        十三幺: \"13 Wonders\"\r\n    }\r\n    //When there is a summary\r\n    if (roundEnd){        \r\n        if (!draw){\r\n            let summary_filtered = []\r\n            //filter out to only those with points\r\n            console.log(\"Summary:\", summary )\r\n            summary = Object.keys(summary).forEach(key => {\r\n                //if value (point) is greater than 0\r\n                if (summary[key] > 0){\r\n                    summary_filtered = summary_filtered.concat({\r\n                                            name: nameDict[key],\r\n                                            points: summary[key]\r\n                                        })\r\n                }\r\n            })\r\n\r\n            const table = summary_filtered.map(e => {\r\n                return (\r\n                    <Tr>\r\n                        <Td>{e.name}</Td>\r\n                        <Td isNumeric>{e.points}</Td>\r\n                    </Tr>\r\n                )\r\n            })\r\n\r\n            console.log(\"Summary filtered\", summary_filtered)\r\n            return (\r\n                <>\r\n                    <Modal isOpen={isOpen} onClose={onClose}>\r\n                    <ModalOverlay />\r\n                    <ModalContent>\r\n                        <ModalHeader h='10px'>\r\n                            <Center>\r\n                                {username.username} wins!\r\n                            </Center>\r\n                        </ModalHeader>\r\n                        <ModalCloseButton />\r\n                        <ModalBody >\r\n                            <Table variant=\"striped\" size='sm'>\r\n                                <Thead>\r\n                                    <Tr>\r\n                                        <Th>Name</Th>\r\n                                        <Th isNumeric>Double</Th>\r\n                                    </Tr>\r\n                                </Thead>\r\n                                <Tbody>\r\n                                    {table}\r\n                                </Tbody>\r\n                            </Table>\r\n                        </ModalBody>\r\n                        <ModalFooter>\r\n                            <Button size='sm' isDisabled={newGame} onClick={handleNewGame} >New game</Button>\r\n                        </ModalFooter>\r\n                    </ModalContent>\r\n                    </Modal>\r\n                </>\r\n            )\r\n        }else{\r\n            \r\n            return(\r\n                <Modal isOpen={isOpen} onClose={onClose}>\r\n                    <ModalOverlay />\r\n                    <ModalContent>\r\n                        <ModalHeader>Draw</ModalHeader>\r\n                        <ModalCloseButton />\r\n                        <ModalFooter>\r\n                            <Button isDisabled={newGame} onClick={handleNewGame} >New game</Button>\r\n                        </ModalFooter>\r\n                    </ModalContent>\r\n                    </Modal>\r\n            )\r\n        }\r\n    }\r\n\r\n    return null\r\n}","import { Collapse, Box, Flex, Spacer, HStack, Image, Text, useDisclosure } from \"@chakra-ui/react\"\r\nimport Tile from \"./Tile\"\r\n\r\nexport default function ScoreInfo({name, score, info, pictures}) {\r\n    const { isOpen, onToggle } = useDisclosure()\r\n\r\n    const combination = pictures.map((picture) => {\r\n        if (picture === \"\"){\r\n            return(\r\n                <Box w='10px' />\r\n            )\r\n        }else{\r\n            return(\r\n                <Image src={`https://raw.githubusercontent.com/JovenSoh/sgmahjong/gh-pages/images/${picture}.jpg`} fallbackSrc=\"\"  h=\"26px\" borderRadius=\"5px\" borderWidth=\"1px\" borderColor=\"#343434\" borderStyle=\"solid\" boxShadow={`1.2px 2px #000000`} />\r\n            )\r\n        }\r\n    })\r\n\r\n    return(\r\n        <Box>\r\n            <Flex>\r\n                <Box _hover={{\"text-decoration\": \"underline\"}} onClick={onToggle}>{name}</Box>\r\n                <Spacer />\r\n                {score}\r\n            </Flex>\r\n            <Collapse in={isOpen}>\r\n                {info.split(\".\").map((sentence) => {\r\n                    return(\r\n                        <Text align='left' justifyContent fontSize={12}>\r\n                            {sentence}\r\n                        </Text>\r\n                    )\r\n                    })}\r\n                <HStack spacing='0px'>\r\n                    {combination}\r\n                </HStack>\r\n            </Collapse>\r\n        </Box>\r\n    )\r\n}","import {Tabs, TabList, TabPanels, Tab, TabPanel, useClipboard, Input, InputGroup, InputRightElement, Text, VStack, Spacer, Button, ButtonGroup, Image, Heading, Flex, Box} from '@chakra-ui/react'\r\nimport { CopyIcon, CheckIcon } from \"@chakra-ui/icons\"\r\nimport NameCard from './NameCard'\r\nimport ScoreInfo from './ScoreInfo'\r\n\r\nexport default function Information({tableWind,yourWind, playerID, currentPlayer, gameState, handleNewGame, roundEnd, onOpen, addBot, connectionStatus}){\r\n    //Invite link\r\n    const {hasCopied, onCopy} = useClipboard(window.location.href)\r\n\r\n    //convert tableWind to image\r\n    let windImage = {\r\n        \"~east\": \"}wind1\",\r\n        \"~south\": \"}wind2\",\r\n        \"~west\": \"}wind3\",\r\n        \"~north\": \"}wind4\"\r\n    }\r\n\r\n    let tWind = windImage[tableWind]\r\n    let yWind = windImage[yourWind]\r\n    \r\n    const score = gameState.map((player) => {\r\n        return(\r\n            <Flex w='100%' >\r\n                {player.username}\r\n                <Spacer />\r\n                {player.score}\r\n            </Flex>\r\n        )\r\n    })\r\n    const flowerIndex = {\r\n        \"~east\": 1,\r\n        \"~south\": 2,\r\n        \"~west\": 3,\r\n        \"~north\": 4\r\n    }\r\n    const scoreList = [\r\n        {\r\n            name: \"Prevailing wind set\",\r\n            score: 1,\r\n            info: \"Pong or kong of prevailing wind\",\r\n            pictures: tWind ? [tWind,tWind,tWind] : [\"}wind1\",\"}wind1\",\"}wind1\"]\r\n        },\r\n        {\r\n            name: \"Seat wind set\",\r\n            score: 1,\r\n            info: \"Pong or kong of seat wind\",\r\n            pictures: tWind ? [tWind,tWind,tWind] : [\"}wind1\",\"}wind1\",\"}wind1\"]\r\n        },\r\n        {\r\n            name: \"Dragon tiles set\",\r\n            score: 1,\r\n            info: \"Pong or kong of any dragon tiles\",\r\n            pictures: [\"~red\",\"~red\",\"~red\"]\r\n        },\r\n        {\r\n            name: \"All Chow\",\r\n            score: 1,\r\n            info: \"Four sets of sequentials with an eye. Eye must not be prevailing or seat wind or dragon tile. Unless self-drawn, must have a two-sided wait\",\r\n            pictures: [\"bamboo1\",\"bamboo2\",\"bamboo3\",\"circles1\",\"circles2\",\"circles3\",\"numbers5\",\"numbers5\"]\r\n        },\r\n        {\r\n            name: \"Seat flower\",\r\n            score: 1,\r\n            info: \"Flower corresponding to your seat position\",\r\n            pictures: yourWind ? [\"flowers\"+flowerIndex[yourWind],\"flowers\"+(flowerIndex[yourWind]+4)] : [\"flowers1\",\"flowers5\"]\r\n        },\r\n        {\r\n            name: \"Animal tile\",\r\n            score: 1,\r\n            info: \"Any animal tile\",\r\n            pictures: [\"cat\",\"mouse\",\"rooster\",\"centipede\"]\r\n        },\r\n        {\r\n            name: \"All Pong\",\r\n            score: 2,\r\n            info: \"Four sets of pong or kong with an eye\",\r\n            pictures: [\"bamboo2\",\"bamboo2\",\"bamboo2\",\"numbers6\",\"numbers6\",\"numbers6\",\"~white\",\"~white\"]\r\n        },\r\n        {\r\n            name: \"Mixed suit\",\r\n            score: 2,\r\n            info: \"Mahjong with one suit and honors\",\r\n            pictures: [\"~east\",\"~east\",\"~east\",\"bamboo9\",\"bamboo9\",\"bamboo9\",\"~red\",\"~red\"]\r\n        },\r\n        {\r\n            name: \"Terminals and Honors\",\r\n            score: 2,\r\n            info: \"Mahjong with 1s, 9s, and honors\",\r\n            pictures: [\"circles1\",\"circles1\",\"circles1\",\"numbers9\",\"numbers9\",\"numbers9\",\"~north\",\"~north\"]\r\n        },\r\n        {\r\n            name: \"7 Pairs\",\r\n            score: 3,\r\n            info: \"7 eyes\",\r\n            pictures: [\"~east\",\"~east\",\"~west\",\"~west\",\"~green\",\"~green\",\"circles5\",\"circles5\"]\r\n        },\r\n        {\r\n            name: \"Ping Wu\",\r\n            score: 4,\r\n            info: \"All chow without flower or animal tiles\",\r\n            pictures: [\"bamboo4\",\"bamboo5\",\"bamboo6\",\"circles4\",\"circles5\",\"circles6\",\"numbers7\",\"numbers7\"]\r\n        },\r\n        {\r\n            name: \"Full Color\",\r\n            score: 4,\r\n            info: \"Mahjong with only one suit\",\r\n            pictures: [\"numbers1\",\"numbers2\",\"numbers3\",\"numbers8\",\"numbers8\",\"numbers8\",\"numbers9\",\"numbers9\"]\r\n        },\r\n        {\r\n            name: \"13 Wonders\",\r\n            score: 5,\r\n            info: \"Each terminal and honors. Any eye\",\r\n            pictures: [\"bamboo1\",\"bamboo9\",\"~east\",\"~south\",\"~west\",\"~north\",\"~red\",\"~red\"]\r\n        },\r\n        {\r\n            name: \"All Terminals\",\r\n            score: 5,\r\n            info: \"Mahjong with only 1s and 9s\",\r\n            pictures: [\"numbers1\",\"numbers1\",\"numbers1\",\"circles1\",\"circles1\",\"circles1\",\"bamboo9\",\"bamboo9\"]\r\n        },\r\n    ]\r\n\r\n    const scoreTable = scoreList.map((e) => {\r\n        return(\r\n            <ScoreInfo name={e.name} score={e.score} info={e.info} pictures={e.pictures} />\r\n        )\r\n    })\r\n\r\n    const pettyList = [\r\n        {\r\n            name: \"Predator Prey\",\r\n            score: 1,\r\n            info: \"Cat-mouse rooster-centipede pair\",\r\n            pictures: [\"cat\",\"mouse\",\"\",\"rooster\",\"centipede\"]\r\n        },\r\n        {\r\n            name: \"Flower Pair\",\r\n            score: 1,\r\n            info: \"Own an opponent flower pair\",\r\n            pictures: [\"flowers\"+((flowerIndex[yourWind]+1)%8),\"flowers\"+((flowerIndex[yourWind]+5)%8)]\r\n        },\r\n        {\r\n            name: \"Flower Pair (Seat)\",\r\n            score: 1,\r\n            info: \"Own your seat flower pair\",\r\n            pictures: [\"flowers\"+flowerIndex[yourWind],\"flowers\"+flowerIndex[yourWind]]\r\n        },\r\n        {\r\n            name: \"Concealed Kong\",\r\n            score: 2,\r\n            info: \"Perform a one/three tiles concealed kong\",\r\n            pictures: ['bamboo8','bamboo8','bamboo8','bamboo8']\r\n        },\r\n        {\r\n            name: \"Flowers Set (u/c)\",\r\n            score: 4,\r\n            info: \"Own all red or black flowers\",\r\n            pictures: [\"flowers1\",\"flowers2\",\"flowers3\",\"flowers4\",\"flowers5\",\"flowers6\",\"flowers7\",\"flowers8\"]\r\n        },\r\n        {\r\n            name: \"Animals Set (u/c)\",\r\n            score: 4,\r\n            info: \"Own all animal tiles\",\r\n            pictures: [\"cat\",\"mouse\",\"rooster\",\"centipede\"]\r\n        },\r\n    ]\r\n\r\n    const pettyTable = pettyList.map((e) => {\r\n        return(\r\n            <ScoreInfo name={e.name} score={e.score} info={e.info} pictures={e.pictures} />\r\n        )\r\n    })\r\n\r\n    let username\r\n    if (gameState.find(e => e.playerID === playerID)){\r\n        username = gameState.find(e => e.playerID === playerID).username\r\n        console.log(\"USERNAME: \", username)\r\n    }\r\n\r\n    return(\r\n        <Box w='200px' h='100vh' bg='RGBA(255,255,255,0.9)'>\r\n            <Tabs mr='10px' align='center' variant='enclosed' isFitted>\r\n                <TabList>\r\n                    <Tab>Table</Tab>\r\n                    <Tab>Scoring</Tab>\r\n                </TabList>\r\n\r\n                <TabPanels >\r\n                    <TabPanel w='200px'>\r\n                        <VStack spacing='25px'>\r\n                            <Box mt='5px'>\r\n                                <NameCard playerID={playerID} username={username} currentPlayer={currentPlayer} wind={yourWind}/>\r\n                                <Flex w='190px'>Prevailing Wind <Spacer /> <Image src={`https://raw.githubusercontent.com/JovenSoh/sgmahjong/gh-pages/images/${tWind}.jpg`} fallbackSrc={`/images/${tWind}.jpg`} h='30px' borderRadius=\"5px\" /> </Flex>\r\n                            </Box>\r\n                            <Box>\r\n                                <Heading fontSize={20} mb='5px'>Leaderboard</Heading>\r\n                                <Box w='190px'>\r\n                                    {score}\r\n                                </Box>\r\n                                <Button isDisabled={gameState.length >= 4} onClick={addBot} size='sm' variant='outline'> Add bot</Button>\r\n                            </Box>\r\n                            <Flex>\r\n                                \r\n                                <ButtonGroup isAttached size='sm' variant='outline'>\r\n                                    <Button disabled={!roundEnd} onClick={onOpen}>Summary</Button>\r\n                                    <Button disabled={!roundEnd} onClick={handleNewGame}>New game</Button>\r\n                                </ButtonGroup>\r\n                            </Flex>\r\n                            <Box>\r\n                                <Text textAlign='left' p='0px' m='0px'>Invite link</Text>\r\n                                <InputGroup>\r\n                                    <Input h='30px' px='2px' variant='filled' value={hasCopied ? \"Copied!\" : window.location.href}  isReadOnly />\r\n                                    <InputRightElement h='30px'>\r\n                                        <Button h='30px' onClick={onCopy} variant='outline'> {hasCopied? <CheckIcon h='20px' /> : <CopyIcon h='20px' />} </Button>\r\n                                    </InputRightElement>\r\n                                </InputGroup>\r\n                            </Box>\r\n                            <Spacer m='auto' />\r\n                            <p>Connection Status: {connectionStatus}</p>\r\n                        </VStack>\r\n\r\n                    </TabPanel>\r\n                    <TabPanel w='200px'>\r\n                        <Flex w='100%' >\r\n                            <strong>Name</strong>\r\n                            <Spacer />\r\n                            <strong>Double</strong>\r\n                        </Flex>\r\n                        {scoreTable}\r\n                        <Flex w='100%' mt='10px' >\r\n                            <strong>Instant Payout</strong>\r\n                            <Spacer />\r\n                            <strong>Points</strong>\r\n                        </Flex>\r\n                        {pettyTable}\r\n                    </TabPanel>\r\n                </TabPanels>\r\n            </Tabs>\r\n        </Box>\r\n    )\r\n}\r\n","import {useState} from 'react'\r\nimport {Flex, Spacer, FormControl, Button, Input, Modal, ModalOverlay, ModalHeader,ModalBody, ModalContent, useDisclosure} from \"@chakra-ui/react\"\r\n\r\nexport default function Username({sendMessage}) {\r\n    const {isOpen, onOpen, onClose } = useDisclosure({defaultIsOpen:true})\r\n    const [username, setUsername] = useState('')\r\n\r\n    const onUsernameChange = (event) => {\r\n        setUsername(event.target.value)\r\n    }\r\n\r\n    //Set Username\r\n    const submitUsername = () => {\r\n        onClose()\r\n        sendMessage(\"Username: \"+username)\r\n    }\r\n    \r\n    return(\r\n        <Modal isOpen={isOpen} onClose={onClose} closeOnOverlayClick={false}>\r\n            <ModalOverlay />\r\n            <ModalContent>\r\n                <ModalHeader>Username</ModalHeader>\r\n                <FormControl px='20px'>\r\n                    <Input onKeyPress={(e) => { (e.key===\"Enter\") ? submitUsername() : console.log() }} onChange={onUsernameChange} value={username} placeholder=\"John Tan...\" />\r\n                    <Flex>\r\n                        <Spacer />\r\n                        <Button my='10px' onClick={submitUsername} type='submit'>Submit</Button>\r\n                    </Flex>\r\n                </FormControl>\r\n            </ModalContent>\r\n        </Modal>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\r\nimport {Box, Flex, Button, Collapse, useDisclosure} from '@chakra-ui/react'\r\nimport { CloseIcon, HamburgerIcon } from '@chakra-ui/icons'\r\nimport { useParams } from \"react-router-dom\"\r\nimport { checkGame, compare, getChow } from './Mahjong';\r\nimport Board from './Board'\r\nimport Summary from './Summary';\r\nimport Information from './Information';\r\nimport Username from './Username';\r\n\r\nexport default function Table() {\r\n  let sequentialTiles_top, sequentialTiles_mid, sequentialTiles_bot, validMove_temp\r\n  const gameId = useParams().gameId\r\n  //socket stuff\r\n  const [socketUrl, setSocketUrl] = useState(`wss://mahjong.irscybersec.ml/api/${gameId}`); //`ws://localhost:3001/${gameId}` || `wss://mahjong.irscybersec.ml/api/${gameId}`\r\n  const [messageHistory, setMessageHistory] = useState([]);\r\n  //set users\r\n  const [onlineUsers, setOnlineUsers] = useState([])\r\n  const [clientID, setClientID] = useState([])\r\n  const [winnerID, setWinnerID] = useState()\r\n  const [currentPlayer, setCurrentPlayer] = useState()\r\n  const [previousPlayer, setPreviousPlayer] = useState(null)\r\n  //set tiles\r\n  const [tiles, setTiles] = useState([])\r\n  const [newTile, setNewTile] = useState()\r\n  const [bonusTiles, setBonusTiles] = useState([])\r\n  const [revealedTiles, setRevealedTiles] = useState([])\r\n  //set winds\r\n  const [yourWind, setYourWind] = useState('')\r\n  const [tableWind, setTableWind] = useState('')\r\n  //discard pile\r\n  const [discards, setDiscards] = useState([])\r\n  const [lastDiscard, setLastDiscard] = useState()\r\n  //moves\r\n  const [validMove, setValidMove] = useState(false)\r\n  const [sequentialTiles, setSequentialTiles] = useState([])\r\n  const [pongTiles, setPongTiles] = useState([])\r\n  const [kongTiles, setKongTiles] = useState([])\r\n  const [game, setGame] = useState(false)\r\n  const [summary, setSummary] = useState()\r\n  //others\r\n  const [currentTurn, setCurrentTurn] = useState(false) //whether it is your turn\r\n  const { isOpen: isOpenSummary, onOpen: onOpenSummary, onClose: onCloseSummary } = useDisclosure() //for Summary\r\n  const { isOpen: isOpenInformation, onClose: onCloseInformation, onToggle: onToggleInformation} = useDisclosure() //for Information\r\n  const [draw, setDraw] = useState(false)\r\n  const [roundEnd, setRoundEnd] = useState(false)\r\n  const [minimumPoints, setMinimumPoints] = useState(1)\r\n  const [delay, setDelay] = useState(3000) //set turn timer\r\n  const [gameState, setGameState] = useState([]) \r\n  /* [  socket: Websocket,\r\n        playerID: playerID,\r\n        handLength: number of tiles,\r\n        bonusTiles: bonus tiles,\r\n        revealedTile\": revealed tiles }] */\r\n\r\n  //select tiles\r\n  const [selectedTile, setSelectedTile] = useState(null)\r\n  const handleSelectTile = (tile) => {\r\n    console.log(tile)\r\n    setSelectedTile(tile)\r\n  }\r\n\r\n  //discarding tiles\r\n  const handleDiscard = () => {\r\n    if (!roundEnd){\r\n      game ? setGame(false) : setGame(false) //if self-drawn, set game back to false\r\n      //if there was a valid move, set it to false and send skip to server\r\n      if (validMove) {\r\n        setValidMove(false)\r\n        sendMessage(clientID + \" skip\")\r\n      }\r\n      console.log(\"Discarding \", selectedTile)\r\n      sendMessage('Discard: ' + JSON.stringify(selectedTile))\r\n      //filter out the discarded tile from our hand\r\n      let newTiles = tiles.filter(e => !((e.suit===selectedTile.suit) && (e.value===selectedTile.value) && (e.id===selectedTile.id)) )\r\n\r\n      setTiles(newTiles)\r\n      setSelectedTile(null)\r\n      //empty kong tiles if I'm not using it\r\n      setKongTiles([])\r\n      setCurrentTurn(false)\r\n    }\r\n  }\r\n\r\n  //function for checking for immediate payouts\r\n  const checkPetty = (bonuses) => {\r\n    //check within the new bonus tiles\r\n    //predator prey\r\n    if (bonuses.filter(e => (e.suit === \"cat\") || (e.suit === \"mouse\")).length === 2){\r\n      console.log(\"CAT MOUSE PAIR\")\r\n      sendMessage(\"AnimalPair\")\r\n    } else if (bonuses.filter(e => (e.suit === \"rooster\") || (e.suit === \"centipede\")).length === 2){\r\n      console.log(\"ROOSTER CENTIPEDE PAIR\")\r\n      sendMessage(\"AnimalPair\")\r\n    }\r\n\r\n    if (bonuses.filter(e => (e.value === 1)).length === 2){\r\n      console.log(\"FlowerPair 1\")\r\n      sendMessage(\"FlowerPair ~east\")\r\n    } else if (bonuses.filter(e => (e.value === 2)).length === 2){\r\n      console.log(\"2 FLOWER PAIR\")\r\n      sendMessage(\"FlowerPair ~south\")\r\n    } else if (bonuses.filter(e => (e.value === 3)).length === 2){\r\n      console.log(\"3 FLOWER PAIR\")\r\n      sendMessage(\"FlowerPair ~west\")\r\n    } else if (bonuses.filter(e => (e.value === 4)).length === 2){\r\n      console.log(\"4 FLOWER PAIR\")\r\n      sendMessage(\"FlowerPair ~north\")\r\n    }\r\n\r\n    //flowers\r\n    //for each bonus\r\n    bonuses.forEach(bonus => {\r\n      //check for predator prey\r\n      if ((bonus.suit === \"mouse\" && bonusTiles.filter(e => e.suit === \"cat\").length > 0) || (bonus.suit === \"cat\" && bonusTiles.filter(e => e.suit === \"mouse\").length > 0) ){\r\n        console.log(\"CAT MOUSE PAIR\")\r\n        sendMessage(\"AnimalPair\")\r\n      }else if ((bonus.suit === \"rooster\" && bonusTiles.filter(e => e.suit === \"centipede\").length > 0) || (bonus.suit === \"centipede\" && bonusTiles.filter(e => e.suit === \"rooster\").length > 0) ){\r\n        console.log(\"ROOSTER CENTIPEDE PAIR\")\r\n        sendMessage(\"AnimalPair\")\r\n      }\r\n\r\n      //check for flower pair\r\n      if (bonusTiles.filter(e => e.value === bonus.value).length === 1){\r\n        console.log(`${bonus.value} FLOWER PAIR`)\r\n      }\r\n    })\r\n  }\r\n\r\n  const lookup = tiles.reduce((a, e) => {\r\n    a[`${e.suit} ${e.value}`] = ++a[`${e.suit} ${e.value}`] || 0;\r\n    return a;\r\n  }, {});\r\n\r\n  const checkKong = (newTile) => {\r\n    //check kong within hand\r\n    let four_concealed = tiles.filter(e => (e.suit === newTile.suit) && (e.value === newTile.value)).concat(newTile)\r\n    let kongSets = tiles.filter(e => lookup[`${e.suit} ${e.value}`] == 3)\r\n\r\n    if (four_concealed.length == 4){\r\n      setKongTiles([four_concealed.concat(\"four\")])\r\n      console.log(\"Four concealed kong\", four_concealed)\r\n    }else if(kongSets){\r\n      setKongTiles([kongSets.concat(\"four\")])\r\n      console.log(\"kongSets\", kongSets)\r\n    }\r\n\r\n    //check kong in exposed\r\n    let gameStateIndex = gameState.findIndex(e => e.playerID === clientID)\r\n    let exposed = gameState[gameStateIndex].revealedTiles\r\n    let one_concealed = exposed.filter(e => (e.suit === newTile.suit) && (e.value === newTile.value)).concat(newTile)\r\n    if (one_concealed.length == 4){\r\n      setKongTiles([one_concealed.concat(\"one\")])\r\n      console.log(\"One concealed kong\",one_concealed)\r\n    }\r\n  }\r\n\r\n  //functions for making moves (chow, pong, kong, game)\r\n  const checkValidMoves = (lastDiscard) => {\r\n    validMove_temp = false\r\n    //if there was a last discard and last discarder is not the player\r\n    if (lastDiscard && clientID !== previousPlayer){\r\n      //check for winning hand\r\n      let [game_temp, summary_temp] = checkGame(tiles,revealedTiles,bonusTiles,tableWind,yourWind, lastDiscard, [])\r\n      setSummary(summary_temp)\r\n      console.log(\"Summary: \",summary_temp)\r\n      //if the discarded tile builds a winning hand and has more than minimum points\r\n      if (game_temp && summary_temp.totalPoints >= minimumPoints) {\r\n        setValidMove(true)\r\n        validMove_temp = true\r\n        setGame(game_temp)\r\n      }\r\n      //check for pong\r\n      let sameTiles = tiles.filter(e => (e.suit === lastDiscard.suit) && (e.value === lastDiscard.value)).concat(lastDiscard)\r\n      console.log(\"Same tiles: \", sameTiles)\r\n      if (sameTiles.length == 3) {\r\n        setValidMove(true)\r\n        validMove_temp = true\r\n        setPongTiles([sameTiles])\r\n      }else if (sameTiles.length == 4){\r\n        setValidMove(true)\r\n        validMove_temp = true\r\n        setKongTiles([sameTiles.concat(\"three\")])\r\n      }\r\n\r\n      //check if last discard is from the guy before you\r\n      if (gameState.at(gameState.findIndex(e => e.playerID===clientID) - 1).playerID === previousPlayer){\r\n        //check for chow\r\n        sequentialTiles_top = tiles.filter(e => (e.suit === lastDiscard.suit) && (e.value === lastDiscard.value-1 || e.value === lastDiscard.value-2 ) )\r\n        sequentialTiles_mid = tiles.filter(e => (e.suit === lastDiscard.suit) && (e.value === lastDiscard.value-1 || e.value === lastDiscard.value+1 ) )\r\n        sequentialTiles_bot = tiles.filter(e => (e.suit === lastDiscard.suit) && (e.value === lastDiscard.value+1 || e.value === lastDiscard.value+2 ) )\r\n        //check for unique chow values\r\n        sequentialTiles_top = getChow(sequentialTiles_top)\r\n        sequentialTiles_mid = getChow(sequentialTiles_mid)\r\n        sequentialTiles_bot = getChow(sequentialTiles_bot)\r\n        //check for multiple chows\r\n        let sequentialTiles_temp = [sequentialTiles_top,sequentialTiles_mid,sequentialTiles_bot].filter(e => e.length===2)\r\n\r\n        if (sequentialTiles_temp.length > 0){\r\n          setValidMove(true)\r\n          validMove_temp = true\r\n          setSequentialTiles(sequentialTiles_temp)\r\n        }\r\n\r\n      }\r\n    }\r\n    //tell server that to wait for our valid move\r\n    if (validMove_temp) {\r\n      sendMessage(clientID + \" validMove\")\r\n    }\r\n  }\r\n\r\n  const handleSkip = () => {\r\n    console.log(\"SKIP!\")\r\n    sendMessage(clientID + \" skip\")\r\n    setValidMove(false)\r\n    setGame(false)\r\n    setPongTiles([])\r\n    setKongTiles([])\r\n    setSequentialTiles([])\r\n  }\r\n\r\n  const handlePong = (pongSet) => {\r\n    console.log(\"PONG!\", pongTiles)\r\n    setValidMove(false)\r\n    setPongTiles([])\r\n    sendMessage(clientID + \" pong \" + JSON.stringify(pongSet))\r\n  }\r\n\r\n  const handleKong = (kongSet, type) => {\r\n    console.log(\"KONG!\", kongSet, type)\r\n    setValidMove(false)\r\n    setKongTiles([])\r\n    if (type === \"three\"){\r\n      sendMessage(clientID + \" threekong \" + JSON.stringify(kongSet))\r\n    }else if (type===\"four\"){\r\n      sendMessage(clientID + \" fourkong \" + JSON.stringify(kongSet))\r\n    }else if (type===\"one\"){\r\n      sendMessage(clientID + \" onekong \" + JSON.stringify([kongSet[0]]))\r\n    }\r\n  }\r\n\r\n  const handleChow = (chowSet) => {\r\n    console.log(\"CHOW!\", sequentialTiles)\r\n    setValidMove(false)\r\n    setSequentialTiles([])\r\n    sendMessage(clientID + \" chow \" + JSON.stringify(chowSet))\r\n  }\r\n\r\n  const handleGame = () => {\r\n    sendMessage(clientID + \" WINS! \"+JSON.stringify(summary)+\" \"+JSON.stringify(tiles))\r\n    setValidMove(false)\r\n    setGame(false)\r\n    setTiles([])\r\n  }\r\n\r\n  const handleNewGame = () => {\r\n    sendMessage(\"New game!\")\r\n  }\r\n\r\n  const addBot = () => {\r\n    sendMessage(\"addBot\")\r\n  }\r\n\r\n  const {\r\n    sendMessage,\r\n    lastMessage,\r\n    readyState,\r\n  } = useWebSocket(socketUrl);\r\n\r\n  const connectionStatus = {\r\n    [ReadyState.CONNECTING]: 'Connecting',\r\n    [ReadyState.OPEN]: 'Connected',\r\n    [ReadyState.CLOSING]: 'Closing',\r\n    [ReadyState.CLOSED]: 'Disconnected',\r\n    [ReadyState.UNINSTANTIATED]: 'Uninstantiated',\r\n  }[readyState];\r\n  \r\n  useEffect(() => {\r\n    if (lastMessage !== null) {\r\n      setMessageHistory(prev => prev.concat(lastMessage));\r\n      console.log(\"Last message:\", lastMessage.data)\r\n      if (lastMessage.data.includes(\"Online users:\")) {\r\n        let userList = lastMessage.data.replace(\"Online users: \",\"\")\r\n        setOnlineUsers(userList)\r\n      }else if (lastMessage.data.includes(\"Game state\")) {\r\n        let gameState_temp = lastMessage.data.replace(\"Game state: \",\"\")\r\n        setGameState(JSON.parse(gameState_temp))\r\n      }else if (lastMessage.data.includes(\"Your ID\")) {\r\n        let clientID_temp = lastMessage.data.replace(\"Your ID: \",\"\")\r\n        setClientID(clientID_temp)\r\n      } else if (lastMessage.data.includes(\"Tiles\")) {\r\n        let tiles_temp = JSON.parse(lastMessage.data.replace(\"Tiles: \",\"\"))\r\n        if (tiles_temp.length === 13){\r\n          setTiles(tiles_temp.sort(compare)) //new hand\r\n        }else{\r\n          setTiles(prev => prev.concat(tiles_temp).sort(compare)) //new tile\r\n        }\r\n        setNewTile(tiles_temp)\r\n        console.log(\"New tiles:\", tiles_temp)\r\n        //if a new tile is drawn, check if 自摸 or concealed kong\r\n        if (tiles_temp.length !== 13){\r\n          console.log(\"Tiles:\",tiles)\r\n          let [game_temp, summary_temp] = checkGame(tiles,revealedTiles,bonusTiles,tableWind,yourWind,[], tiles_temp)\r\n          setValidMove(game_temp)\r\n          checkKong(tiles_temp)\r\n          setGame(game_temp)\r\n          setSummary(summary_temp)\r\n        }\r\n      } else if (lastMessage.data.includes(\"Bonus\")) {\r\n        let bonusTiles_temp = JSON.parse(lastMessage.data.replace(\"Bonus: \",\"\"))\r\n        checkPetty(bonusTiles_temp)\r\n        setBonusTiles(prev => prev.concat(bonusTiles_temp))\r\n      }else if (lastMessage.data.includes(\"Table wind\")) {\r\n        setTableWind(lastMessage.data.replace(\"Table wind: \",\"\"))\r\n      }else if (lastMessage.data.includes(\"Your wind\")) {\r\n        setYourWind(lastMessage.data.replace(\"Your wind: \",\"\"))\r\n      }else if (lastMessage.data.includes(\"It is your turn\")) {\r\n        setCurrentTurn(true)\r\n      }else if (lastMessage.data.includes(\"Discards\")) {\r\n        let discards_temp = JSON.parse(lastMessage.data.replace(\"Discards: \", \"\"))\r\n        //only set the last discard if a new tile is discarded, this is to avoid taking the last discard when someone else takes the last discard\r\n        if (discards_temp.length > discards.length) {\r\n          setLastDiscard(discards_temp.at(-1))\r\n          checkValidMoves(discards_temp.at(-1))\r\n          console.log(\"Last discarded\", discards_temp.at(-1))\r\n        }else{\r\n          setLastDiscard()\r\n        }\r\n        setDiscards(discards_temp)\r\n      }else if (lastMessage.data.includes(\"Previous player: \")) {\r\n        setPreviousPlayer(lastMessage.data.replace(\"Previous player: \",\"\"))\r\n      }else if (lastMessage.data.includes(\"Pong!\")){\r\n        sendMessage(\"Ping!\")\r\n      }else if (lastMessage.data.includes(\"Revealed\")) {\r\n        //sucessfull move made\r\n        let revealedTiles_temp = JSON.parse(lastMessage.data.replace(\"Revealed: \",\"\"))\r\n        let newTiles = tiles\r\n        console.log(\"New Tiles: \", newTiles)\r\n        //remove from our hand\r\n        for (let i=0; i<revealedTiles_temp.length; i++){\r\n          console.log(\"Target: \",revealedTiles_temp[i])\r\n          console.log(\"Target Index: \", newTiles.indexOf(revealedTiles_temp[i]))\r\n          newTiles = newTiles.filter((tile) => !((tile.suit === revealedTiles_temp[i].suit) && (tile.value === revealedTiles_temp[i].value) && (tile.id === revealedTiles_temp[i].id)))\r\n        }\r\n        setTiles(newTiles)\r\n        setRevealedTiles(prev => prev.concat(revealedTiles_temp).sort(compare))\r\n      }else if (lastMessage.data.includes(\"Current player: \")){\r\n        let currentPlayer_temp = lastMessage.data.replace(\"Current player: \",\"\")\r\n        setCurrentPlayer(currentPlayer_temp.substring(1, currentPlayer_temp.length-1))\r\n      }else if (lastMessage.data.includes(\"New game!\")) {\r\n        setRoundEnd(false)\r\n        setDraw(false)\r\n        setDiscards([])\r\n        setLastDiscard()\r\n        setBonusTiles([])\r\n        setRevealedTiles([])\r\n        setSelectedTile()\r\n      }else if (lastMessage.data.includes(\"wins\")) {\r\n        sendMessage(\"ShowAll: \" + JSON.stringify(tiles))\r\n        setTiles([])\r\n        setRoundEnd(true)\r\n        let summary_temp = JSON.parse(lastMessage.data.split(\" \")[2])\r\n        setSummary(summary_temp)\r\n        setWinnerID(lastMessage.data.split(\" \")[0])\r\n      }else if (lastMessage.data.includes(\"Draw:\")) {\r\n        setDraw(true)\r\n        setRoundEnd(true)\r\n        sendMessage(\"ShowAll: \" + JSON.stringify(tiles))\r\n        setTiles([])\r\n      }\r\n    }\r\n  }, [lastMessage, setMessageHistory]);\r\n\r\n\r\n  return (\r\n    <Box h='100vh' w='100vw' bg='#E3DBB3'>\r\n      <Username sendMessage={sendMessage} />\r\n      \r\n      <Flex zIndex={1} w='100%' m='auto' position=\"absolute\" >\r\n        <Board clientID={clientID} tiles={tiles} newTile={newTile} handleSelectTile={handleSelectTile} currentTurn={currentTurn} currentPlayer={currentPlayer} gameState={gameState} discards={discards}  selectedTile={selectedTile} handleDiscard={handleDiscard} lastDiscard={lastDiscard} pongTiles={pongTiles} handlePong={handlePong}handleChow={handleChow} sequentialTiles={sequentialTiles} kongTiles={kongTiles} handleKong={handleKong} game={game} handleGame={handleGame} validMove={validMove} handleSkip={handleSkip} />\r\n      </Flex>\r\n\r\n      \r\n      <Flex zIndex={2}  float=\"right\" position=\"relative\">\r\n        <Collapse in={!isOpenInformation} onClose={onCloseInformation} placement='right' >\r\n          <Information tableWind={tableWind} yourWind={yourWind} playerID={clientID} currentPlayer={currentPlayer} gameState={gameState} handleNewGame={handleNewGame} roundEnd={roundEnd} onOpen={onOpenSummary} addBot={addBot} connectionStatus={connectionStatus} />\r\n        </Collapse>\r\n      </Flex>\r\n\r\n      <Flex zIndex={2}  float=\"right\" position=\"relative\">\r\n        <Button variant=\"link\" _focus={false} onClick={onToggleInformation} alignItems='top' mt='3vh' h='50px'> {!isOpenInformation? <CloseIcon boxSize={4} /> : <HamburgerIcon boxSize={6} /> } </Button>\r\n      </Flex>\r\n\r\n      <Summary username={gameState.find(e => e.playerID === winnerID)} roundEnd={roundEnd} summary={summary} handleNewGame={handleNewGame} draw={draw} isOpen={isOpenSummary} onOpen={onOpenSummary} onClose={onCloseSummary} />\r\n    </Box>\r\n  );\r\n};","export default __webpack_public_path__ + \"static/media/mahjongVid.74b8b9da.webm\";","import {Center,Text, Box, Button, Flex, InputGroup, Input, InputRightElement, Collapse, useDisclosure} from '@chakra-ui/react'\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { useState } from \"react\"\r\nimport bgVid from \"../videos/mahjongVid.webm\"\r\nimport \"../App.css\"\r\n\r\nexport default function Menu(){\r\n    let navigate = useNavigate()\r\n    const [gameCode, setGameCode] = useState(\"\")\r\n    const [width, setWidth] = useState(\"100%\")\r\n    const { isOpen, onToggle } = useDisclosure()\r\n    \r\n    function toggleJoin(){\r\n        setWidth(\"35%\")\r\n        onToggle()\r\n    }\r\n\r\n    function handleCodeChange(e) {\r\n        setGameCode(e.target.value)\r\n    }\r\n\r\n    function gameID() {\r\n        function s4() {\r\n            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\r\n        }\r\n        return s4() + s4() + s4();\r\n      };\r\n\r\n    function createGame() {\r\n        navigate(`/game/${gameID()}`)\r\n    }\r\n\r\n    function handleJoin() {\r\n        if (gameCode.length < 10){\r\n            alert(\"No room found\")\r\n        }else{\r\n            navigate(`/game/${gameCode}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Center h='100vh' w='100vw' bg='rgba(90,90,90,0.3)'>\r\n            <video autoPlay loop muted id='video'>\r\n                <source src={bgVid} type='video/webm' />\r\n            </video>\r\n            <Box w='300px' p=\"10px\" bgColor='rgba(240,240,240,0.9)' borderRadius=\"10px\">\r\n                <Center>\r\n                    <Text fontSize=\"24px\" textAlign='center'>Play <strong >Singapore Mahjong</strong> with your friends</Text>\r\n                </Center>\r\n                <Button onClick={createGame} w='100%' variant='outline' borderWidth=\"1px\" borderStyle='solid' borderColor='green' borderRadius=\"10px\">Create game</Button>\r\n\r\n                <Flex>\r\n                    <Collapse mt='7px' in={isOpen} direction=\"left\" animateOpacity>\r\n                        <Input px='2px' focusBorderColor='green' variant=\"flushed\"  placeholder='Invite code' value={gameCode} onChange={(e) => handleCodeChange(e)} />\r\n                    </Collapse>\r\n                \r\n                    <Button onClick={isOpen ? handleJoin : toggleJoin} w={width} variant='outline' _focus={{outline:\"none\"}} borderWidth=\"1px\" borderStyle='solid' borderColor='green' borderRadius=\"10px\">{isOpen ? \"Join\" : \"Join game\"} </Button>\r\n                </Flex>\r\n            </Box>\r\n        </Center>\r\n    )\r\n}","import Table from \"./components/Table\";\r\nimport Menu from \"./components/Menu\";\r\nimport {\r\n  BrowserRouter as HashRouter,\r\n  Routes, Route\r\n} from \"react-router-dom\"\r\n\r\nexport default function App() {\r\n  \r\n  return (\r\n    <HashRouter forceRefresh={true} basename={process.env.PUBLIC_URL + '/'}>\r\n      <Routes>\r\n        <Route path=\"/\" exact element = {<Menu />} />\r\n        <Route path=\"/game/:gameId\" exact element={<Table />} />\r\n      </Routes>\r\n    </HashRouter>\r\n  );\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App'\r\nimport {ChakraProvider} from '@chakra-ui/react'\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n      <App />\r\n  </ChakraProvider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}